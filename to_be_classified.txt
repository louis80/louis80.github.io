df.['a'].value_counts().reset_index()

# Create the pandas DataFrame
df = pd.DataFrame([[np.nan, 10, 20], [3, 15, 20], [15, 25, 20]] , columns = ['41', '43', '44'])
print(df)

print(df.rank(axis=1, ascending=False))

def get_leaderboard_position(dic_score_leaderboard, nbr_days):
    '''
    (Input)
    (Output)
    '''
    dic_position_leaderboard = {}

    for day_number in range(0, nbr_days)[0:3]:
        tmp = []

        for id_player in dic_score_leaderboard.keys():
            #if np.isnan(dic_score_leaderboard[id_player][day_number]) == False:
            tmp.append(dic_score_leaderboard[id_player][day_number])

        tmp = sorted(tmp, reverse=True)

        for id_player in dic_score_leaderboard.keys():
            if dic_score_leaderboard[id_player][day_number] in tmp:
                if np.isnan(dic_score_leaderboard[id_player][day_number]) == False:
                    if id_player in dic_position_leaderboard.keys():
                        dic_position_leaderboard[id_player].append(tmp.index(dic_score_leaderboard[id_player][day_number])+1)
                    else:
                        dic_position_leaderboard[id_player] = [tmp.index(dic_score_leaderboard[id_player][day_number])+1]

        if day_number==0:
            print(list(dic_score_leaderboard.keys()))
        print(tmp)
        print(dic_position_leaderboard, '\n\n')
#############

f, ax = plt.subplots(figsize=(15,5))
ax = sns.pointplot(x=[1, 2, 3, 4, 5, 6], y=[1, 1, np.nan, 1, 1, np.nan], color='green')
ax = sns.pointplot(x=[1, 2, 3, 4, 5, 6], y=[2, 2, 2, np.nan, np.nan, np.nan], color='orange')
ax = sns.pointplot(x=[1, 2, 3, 4, 5, 6], y=[3, 3, 3,3,np.nan, 3])
ax = sns.pointplot(x=[1, 2, 3, 4, 5, 6], y=[4, 4,4,4, 4, np.nan], color='red')


ax.set(xlabel='Number of Days', ylabel='')
ax.set_title('AFTER')
ax.set_yticks([])

plt.legend(labels=['Player 1', 'Player 2', 'Player 3', 'Player 4'])
leg = ax.get_legend()
leg.legendHandles[0].set_color('red')
leg.legendHandles[1].set_color('darkblue')
leg.legendHandles[2].set_color('orange')
leg.legendHandles[3].set_color('green')

plt.show()

#############

import pandas as pd
import re
import numpy as np
import seaborn as sns; sns.set()
import matplotlib.pyplot as plt
sns.set_style("darkgrid")


f, ax = plt.subplots(figsize=(14,8))
ax = sns.lineplot(x=nb_days, y=daily_uniqe_user, label="Number of daily unique users")
ax = sns.lineplot(x=nb_days, y=cum_daily_uniqe_user, label="Cumulative number of unique users")
ax.legend()

ax.set(xlabel='Number of days', ylabel='Count of users')
ax.set_title('Campaign id :')

ax.text(min(nb_days), -2, "Campaign launched", ha='center', **dict(size=10, color='green'))
ax.text(min(nb_days), -0.5, "•", ha='center', **dict(size=30, color='green'))
ax.text(max(nb_days), -2, "Campaign ended", ha='center', **dict(size=10, color='#550A21'))
ax.text(max(nb_days), -0.5, "•", ha='center', **dict(size=30, color='#550A21'))

ax = plt.stackplot(nb_days, daily_uniqe_user, alpha=0.3, color= "#1E90FF")
ax = plt.stackplot(nb_days, cum_daily_uniqe_user, alpha=0.2, color= "#FF7F00")


plt.show()


df_full = df_full.apply(pd.to_numeric)
corr = df_full.corr()
f, ax = plt.subplots(figsize=(15, 15))
sns.heatmap(corr, annot=True,
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values)


################################################################################
 • Docker

################################################################################
 • Python
